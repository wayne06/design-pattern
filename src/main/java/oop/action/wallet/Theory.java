package oop.action.wallet;

/**
 * 1. 什么是基于贫血模型的传统开发模式？
 *
 * MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。
 * MVC 三层开发架构是一个比较笼统的分层方式，落实到具体的开发层面，很多项目也并不会 100% 遵从 MVC 固定的分层方式，
 * 而是会根据具体的项目需求，做适当的调整。
 * 比如，现在很多 Web 或者 App 项目都是前后端分离的，后端负责暴露接口给前端调用。
 * 这种情况下，我们一般就将后端项目分为 Repository 层、Service 层、Controller 层。
 * 其中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。
 *
 * 我们平时开发 Web 后端项目的时候，基本上都是这么组织代码的。
 * 其中，UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，
 * UserVo 和 UserController 在这里属于接口层。
 * 从代码中，我们可以发现，UserBo 是一个纯粹的数据结构，只包含数据，不包含任何业务逻辑。
 * 业务逻辑集中在 UserService 中。我们通过 UserService 来操作 UserBo。
 * 换句话说，Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类中。
 * 像 UserBo 这样，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。
 * 同理，UserEntity、UserVo 都是基于贫血模型设计的。
 * 这种贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。
 *
 * 2. 什么是基于充血模型的 DDD 开发模式？
 *
 * 在贫血模型中，数据和业务逻辑被分割到不同的类中。充血模型（Rich Domain Model）正好相反，数据和对应的业务逻辑被封装到同一个类中。
 * 因此，这种充血模型满足面向对象的封装特性，是典型的面向对象编程风格。
 *
 * 领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。
 * 它被大众熟知，还是基于另一个概念的兴起，那就是微服务。
 * 除了监控、调用链追踪、API 网关等服务治理系统的开发之外，微服务还有另外一个更加重要的工作，那就是针对公司的业务，合理地做微服务拆分。
 * 而领域驱动设计恰好就是用来指导划分服务的。所以，微服务加速了领域驱动设计的盛行。
 *
 *
 *
 *
 */
public class Theory {
}

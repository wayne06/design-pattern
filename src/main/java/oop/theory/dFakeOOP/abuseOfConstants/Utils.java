package oop.theory.dFakeOOP.abuseOfConstants;

/**
 * 利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。
 * 但是，有的时候，从业务含义上，A 类和 B 类并不一定具有继承关系，仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。
 *
 * 既然继承不能解决这个问题，我们可以定义一个新的类，实现 URL 拼接和分割的方法。
 * 而拼接和分割两个方法，不需要共享任何数据，所以新的类不需要定义任何属性，这个时候，我们就可以把它定义为只包含静态方法的 Utils 类了。
 * 实际上，只包含静态方法不包含任何属性的 Utils 类，是彻彻底底的面向过程的编程风格。
 * 但这并不是说，我们就要杜绝使用 Utils 类了。
 * 实际上，从刚刚讲的 Utils 类存在的目的来看，它在软件开发中还是挺有用的，能解决代码复用问题。
 * 所以，这里并不是说完全不能用 Utils 类，而是说，要尽量避免滥用，不要不加思考地随意去定义 Utils 类。
 *
 * 类比 Constants 类的设计，我们设计 Utils 类的时候，最好也能细化一下，针对不同的功能，设计不同的 Utils 类，
 * 比如 FileUtils、IOUtils、StringUtils、UrlUtils 等，不要设计一个过于大而全的 Utils 类
 */
public class Utils {
}

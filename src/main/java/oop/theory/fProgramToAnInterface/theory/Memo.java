package oop.theory.fProgramToAnInterface.theory;

/**
 * “基于接口而非实现编程 ”这条原则的英文描述是：“Program to an interface, not an implementation”
 *
 * 应用这条原则，可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。
 * 上游系统面向接口而非实现编程，不依赖不稳定的实现细节，
 * 这样当实现发生变化的时候，上游系统的代码基本上不需要做改动，以此来降低耦合性，提高扩展性。
 *
 * 在软件开发中，最大的挑战之一就是需求的不断变化，这也是考验代码设计好坏的一个标准。
 * 越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。
 * 好的代码设计，不仅能应对当下的需求，而且在将来需求发生变化的时候，仍然能够在不破坏原有代码设计的情况下灵活应对。
 * 而抽象就是提高代码扩展性、灵活性、可维护性最有效的手段之一
 *
 */
public class Memo {
}

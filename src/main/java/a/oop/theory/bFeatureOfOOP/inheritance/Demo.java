package a.oop.theory.bFeatureOfOOP.inheritance;

/**
 * 继承是用来表示类之间的 is-a 关系，比如猫是一种哺乳动物。
 * 从继承关系上来讲，继承可以分为两种模式，单继承和多继承。
 * 单继承表示一个子类只继承一个父类，多继承表示一个子类可以继承多个父类，比如猫既是哺乳动物，又是爬行动物。
 * 为了实现继承这个特性，编程语言需要提供特殊的语法机制来支持，
 * 比如 Java 使用 extends 关键字来实现继承，C++ 使用冒号（class B : public A），Python 使用 paraentheses()，Ruby 使用 <。
 *
 * 不过，有些编程语言只支持单继承，不支持多重继承，比如 Java、PHP、C#、Ruby 等，
 * 而有些编程语言既支持单重继承，也支持多重继承，比如 C++、Python、Perl 等。
 *
 * 继承最大的一个好处就是代码复用。假如两个类有一些相同的属性和方法，我们就可以将这些相同的部分，抽取到父类中，让两个子类继承父类。
 * 这样，两个子类就可以重用父类中的代码，避免代码重复写多遍。
 * 不过，这一点也并不是继承所独有的，我们也可以通过其他方式来解决这个代码复用的问题，比如利用组合关系而不是继承关系。
 *
 * 如果我们再上升一个思维层面，去思考继承这一特性，可以这么理解：
 * 我们代码中有一个猫类，有一个哺乳动物类。猫属于哺乳动物，从人类认知的角度上来说，是一种 is-a 关系。
 * 我们通过继承来关联两个类，反应真实世界中的这种关系，非常符合人类的认知，
 * 而且，从设计的角度来说，也有一种结构美感。
 *
 * 继承的概念很好理解，也很容易使用。不过，过度使用继承，继承层次过深过复杂，就会导致代码可读性、可维护性变差。
 * 为了了解一个类的功能，我们不仅需要查看这个类的代码，还需要按照继承关系一层一层地往上查看“父类、父类的父类……”的代码。
 * 还有，子类和父类高度耦合，修改父类的代码，会直接影响到子类。
 * 所以，继承这个特性也是一个非常有争议的特性。很多人觉得继承是一种反模式。我们应该尽量少用，甚至不用。
 * 关于这个问题，在后面讲到“多用组合少用继承”这种设计思想的时候，我会非常详细地再讲解，这里暂时就不展开讲解了
 */
public class Demo {
}

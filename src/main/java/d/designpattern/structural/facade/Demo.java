package d.designpattern.structural.facade;

/**
 *
 * 门面模式：为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。
 *
 *
 * 应用场景：
 *
 *
 * 1. 解决易用性问题
 *
 * 门面模式可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。
 * 比如，Linux 系统调用函数就可以看作一种“门面”。它是 Linux 操作系统暴露给开发者的一组“特殊”的编程接口，它封装了底层更基础的 Linux 内核调用。
 * 再比如，Linux 的 Shell 命令，实际上也可以看作一种门面模式的应用。它继续封装系统调用，提供更加友好、简单的命令，让我们可以直接通过执行命令来跟操作系统交互。
 *
 *
 *  2. 解决性能问题
 *
 * 设系统 A 是一个后端服务器，提供了 a、b、c、d 四个接口，系统 B 是 App 客户端。App 客户端通过后端服务器提供的接口来获取数据。
 * App 和服务器之间是通过移动网络通信的，网络通信耗时比较多，为了提高 App 的响应速度，我们要尽量减少 App 与服务器之间的网络通信次数。
 *
 * 假设，完成某个业务功能（比如显示某个页面信息）需要“依次”调用 a、b、d 三个接口，因自身业务的特点，不支持并发调用这三个接口。
 *
 * 如果我们现在发现 App 客户端的响应速度比较慢，排查之后发现，是因为过多的接口调用过多的网络通信。
 * 针对这种情况，我们就可以利用门面模式，让后端服务器提供一个包裹 a、b、d 三个接口调用的接口 x。
 * App 客户端调用一次接口 x，来获取到所有想要的数据，将网络通信的次数从 3 次减少到 1 次，也就提高了 App 的响应速度。
 *
 *
 * 3. 解决分布式事务问题
 *
 * 在一个金融系统中，有两个业务领域模型，用户和钱包。这两个业务领域模型都对外暴露了一系列接口，比如用户的增删改查接口、钱包的增删改查接口。
 * 假设有这样一个业务场景：
 * 在用户注册的时候，我们不仅会创建用户（在数据库 User 表中），还会给用户创建一个钱包（在数据库的 Wallet 表中）。
 * 对于这样一个简单的业务需求，我们可以通过依次调用用户的创建接口和钱包的创建接口来完成。
 * 但是，用户注册需要支持事务，也就是说，创建用户和钱包的两个操作，要么都成功，要么都失败，不能一个成功、一个失败。
 * 要支持两个接口调用在一个事务中执行，是比较难实现的，这涉及分布式事务问题。
 * 虽然我们可以通过引入分布式事务框架或者事后补偿的机制来解决，但代码实现都比较复杂。
 * 而最简单的解决方案是，利用数据库事务或者 Spring 框架提供的事务（如果是 Java 语言的话），在一个事务中，执行创建用户和创建钱包这两个 SQL 操作。
 * 这就要求两个 SQL 操作要在一个接口中完成，
 * 所以，我们可以借鉴门面模式的思想，再设计一个包裹这两个操作的新接口，让新接口在一个事务中执行两个 SQL 操作。
 */
public class Demo {

    public static void main(String[] args) {
        //...
    }

}

package d.designpattern.structural.flyweight.demo5;

/**
 * 在 Java Integer 的实现中，-128 到 127 之间的整型对象会被事先创建好，缓存在 IntegerCache 类中。
 * 当我们使用自动装箱或者 valueOf() 来创建这个数值区间的整型对象时，会复用 IntegerCache 类事先创建好的对象。
 * 这里的 IntegerCache 类就是享元工厂类，事先创建好的整型对象就是享元对象。
 *
 * 在 Java String 类的实现中，JVM 开辟一块存储区专门存储字符串常量，这块存储区叫作字符串常量池，类似于 Integer 中的 IntegerCache。
 * 不过，跟 IntegerCache 不同的是，它并非事先创建好需要共享的对象，而是在程序的运行期间，根据需要来创建和缓存字符串常量。
 *
 * 实际上，享元模式对 JVM 的垃圾回收并不友好。
 * 因为享元工厂类一直保存了对享元对象的引用，这就导致享元对象在没有任何代码使用的情况下，也并不会被 JVM 垃圾回收机制自动回收掉。
 * 因此，在某些情况下，如果对象的生命周期很短，也不会被密集使用，利用享元模式反倒可能会浪费更多的内存。
 * 所以，除非经过线上验证，利用享元模式真的可以大大节省内存，否则，就不要过度使用这模式，为了一点点内存的节省而引入一个复杂的设计模式。
 */
public class Demo {

}

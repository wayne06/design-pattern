package e.opensourced.unix.demo3;

/**
 * 一、Code Review 的价值：
 *
 * 1. CR 践行“三人行必有我师”
 * 2. CR 能摒弃“个人英雄主义”
 * 3. CR 能有效提高代码可读性
 * 4. CR 是技术传帮带的有效途径
 * 5. CR 保证代码不止一个人熟悉
 * 6. CR 能打造良好的技术氛围
 * 7. CR 是一种技术沟通方式
 * 8. CR 能提高团队的自律性
 *
 * 二、工期紧，没时间 CR 该怎么办？
 *
 * 工期都是人排的，稍微排松点就行了。关键还是在于整个公司对 Code Review 的接受程度。
 * 而且，Code Review 熟练之后，并不需要花费太长的时间。
 * 尽管开始做 Code Review 的时候，可能因为不熟练，需要有一个 checklist 对照着来做。起步阶段可能会比较耗时。
 * 但熟练之后，Code Review 就像键盘盲打一样，已经忘记了哪个手指按的是哪个键了，扫一遍代码就能揪出绝大部分问题。
 *
 *
 * 三、业务一直变，可能不会长期维护，可以不需要 CR 吗？
 *
 * 这种现象在游戏开发、一些早期的创业公司或者项目验证阶段比较常见。项目讲求短平快，先验证产品，再优化技术。
 * 如果确实面对的还只是生存问题，代码质量确实不是首要的，特殊情况下，不做 Code Review 是支持的！
 *
 *
 * 四、团队成员技术水平不高、没有 CR 经验，该怎么办？
 *
 * 这种情况也挺常见。不过没关系，团队的技术水平都是可以培养的。可以先让资深同事、技术好的同事或技术 leader，来 Review 其他所有人的代码。
 * Review 的过程本身就是一种“传帮带”的过程。慢慢地，整个团队就知道该如何 Review 了。
 * 虽然这可能会有一个相当长的过程，但如果真的想在团队中执行 Code Review，这不失为一种“曲线救国”的方法。
 *
 *
 * 五、时间长了，觉得 CR 浪费时间，不认真对待，该怎么办？
 *
 * 首先，要明确的告诉 Code Review 的重要性，要严格执行，让大家不要懈怠，适当的时候可以“杀鸡儆猴”。
 * 其次，可以像 Google 一样，将 Code Review 间接地跟 KPI、升职等联系在一块，高级工程师有义务做 Code Review，就像有义务做技术面试一样。
 * 再次，想办法活跃团队的技术氛围，把 Code Review 作为一种展示自己技术的机会，带动起大家对 Code Review 的积极性，提高大家对 Code Review 的认同感。
 *
 */
public class Demo {

}
